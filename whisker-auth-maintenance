#!/bin/bash

# Whisker Auth - VPS Maintenance Script
# Usage: sudo whisker-auth-maintenance [command]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
APP_NAME="whisker-auth"
APP_USER="whisker"
APP_DIR="/var/www/whisker-auth"
BACKUP_DIR="/var/backups/whisker-auth"
LOG_DIR="/var/log/whisker-auth"
VENV_DIR="${APP_DIR}/venv"

# Functions
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This script must be run as root"
        exit 1
    fi
}

service_status() {
    print_status "Checking service status..."
    echo
    echo "=== Whisker Auth Service ==="
    systemctl status ${APP_NAME} --no-pager -l || true
    echo
    echo "=== Nginx Service ==="
    systemctl status nginx --no-pager -l || true
    echo
    echo "=== PostgreSQL Service ==="
    systemctl status postgresql --no-pager -l || true
    echo
    echo "=== Port Status ==="
    netstat -tlnp | grep -E ":80|:443|:5000" || true
}

start_services() {
    print_status "Starting services..."
    systemctl start postgresql
    systemctl start ${APP_NAME}
    systemctl start nginx
    print_success "All services started"
}

stop_services() {
    print_status "Stopping services..."
    systemctl stop nginx
    systemctl stop ${APP_NAME}
    print_success "Services stopped"
}

restart_services() {
    print_status "Restarting services..."
    systemctl restart postgresql
    systemctl restart ${APP_NAME}
    systemctl restart nginx
    print_success "All services restarted"
}

view_logs() {
    echo "=== Application Logs (last 50 lines) ==="
    tail -50 ${LOG_DIR}/gunicorn.log 2>/dev/null || journalctl -u ${APP_NAME} -n 50 --no-pager
    echo
    echo "=== Nginx Error Logs (last 20 lines) ==="
    tail -20 /var/log/nginx/error.log 2>/dev/null || echo "No nginx error log found"
    echo
    echo "=== System Logs for Whisker Auth (last 20 lines) ==="
    journalctl -u ${APP_NAME} -n 20 --no-pager
}

update_application() {
    print_status "Updating Whisker Auth application..."
    
    # Create backup first
    create_backup
    
    # Check if new files exist
    if [ ! -d "/tmp/whisker-auth-new" ]; then
        print_warning "No update files found in /tmp/whisker-auth-new/"
        print_status "Please upload new files to /tmp/whisker-auth-new/ first"
        return 1
    fi
    
    # Stop services
    systemctl stop ${APP_NAME}
    
    # Backup current version
    cp -r ${APP_DIR} ${APP_DIR}.backup.$(date +%Y%m%d-%H%M%S)
    
    # Update files
    print_status "Copying new files..."
    cp -r /tmp/whisker-auth-new/* ${APP_DIR}/
    chown -R ${APP_USER}:${APP_USER} ${APP_DIR}
    
    # Update Python dependencies
    print_status "Updating Python dependencies..."
    sudo -u ${APP_USER} ${VENV_DIR}/bin/pip install -r ${APP_DIR}/requirements-production.txt --upgrade
    
    # Run database migrations if needed
    cd ${APP_DIR}/backend
    sudo -u ${APP_USER} ${VENV_DIR}/bin/python -c "
from app import app, db
with app.app_context():
    db.create_all()
    print('Database updated')
"
    
    # Restart services
    systemctl start ${APP_NAME}
    
    # Test if application is responding
    sleep 5
    if curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
        print_success "Application updated successfully"
        # Clean up
        rm -rf /tmp/whisker-auth-new/
    else
        print_error "Application update failed - service not responding"
        print_status "Rolling back..."
        systemctl stop ${APP_NAME}
        latest_backup=$(ls -1t ${APP_DIR}.backup.* | head -1)
        if [ -n "$latest_backup" ]; then
            rm -rf ${APP_DIR}
            mv "$latest_backup" ${APP_DIR}
            systemctl start ${APP_NAME}
            print_warning "Rolled back to previous version"
        fi
        return 1
    fi
}

create_backup() {
    print_status "Creating backup..."
    
    # Create backup directory
    mkdir -p ${BACKUP_DIR}
    
    # Database backup
    print_status "Backing up database..."
    sudo -u postgres pg_dump ${APP_NAME} > ${BACKUP_DIR}/database-$(date +%Y%m%d-%H%M%S).sql
    
    # Application files backup
    print_status "Backing up application files..."
    tar -czf ${BACKUP_DIR}/application-$(date +%Y%m%d-%H%M%S).tar.gz -C /var/www ${APP_NAME}
    
    # Keep only last 7 backups
    cd ${BACKUP_DIR}
    ls -1t database-*.sql | tail -n +8 | xargs -r rm
    ls -1t application-*.tar.gz | tail -n +8 | xargs -r rm
    
    print_success "Backup completed"
    ls -la ${BACKUP_DIR}/
}

restore_backup() {
    if [ -z "$2" ]; then
        print_error "Please specify backup file"
        echo "Available backups:"
        ls -la ${BACKUP_DIR}/
        return 1
    fi
    
    backup_file="$2"
    
    if [[ "$backup_file" == *".sql"* ]]; then
        # Database restore
        print_warning "This will overwrite the current database!"
        read -p "Continue? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_status "Restoring database from ${backup_file}..."
            systemctl stop ${APP_NAME}
            sudo -u postgres dropdb ${APP_NAME} || true
            sudo -u postgres createdb ${APP_NAME}
            sudo -u postgres psql ${APP_NAME} < ${BACKUP_DIR}/${backup_file}
            systemctl start ${APP_NAME}
            print_success "Database restored"
        fi
    elif [[ "$backup_file" == *".tar.gz"* ]]; then
        # Application restore
        print_warning "This will overwrite the current application files!"
        read -p "Continue? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_status "Restoring application from ${backup_file}..."
            systemctl stop ${APP_NAME}
            cd /var/www
            tar -xzf ${BACKUP_DIR}/${backup_file}
            chown -R ${APP_USER}:${APP_USER} ${APP_NAME}
            systemctl start ${APP_NAME}
            print_success "Application restored"
        fi
    else
        print_error "Unknown backup file type"
    fi
}

cleanup_logs() {
    print_status "Cleaning up old logs..."
    
    # Rotate logs manually
    logrotate /etc/logrotate.d/whisker-auth -f
    
    # Clean up old journal logs (keep 30 days)
    journalctl --vacuum-time=30d
    
    # Clean up nginx logs older than 30 days
    find /var/log/nginx -name "*.gz" -mtime +30 -delete
    
    print_success "Log cleanup completed"
}

system_info() {
    print_status "System Information"
    echo
    echo "=== Disk Usage ==="
    df -h
    echo
    echo "=== Memory Usage ==="
    free -h
    echo
    echo "=== CPU Information ==="
    lscpu | head -20
    echo
    echo "=== Load Average ==="
    uptime
    echo
    echo "=== Active Connections ==="
    netstat -an | grep :80 | wc -l | awk '{print "HTTP connections: " $1}'
    netstat -an | grep :443 | wc -l | awk '{print "HTTPS connections: " $1}'
    echo
    echo "=== Process Information ==="
    ps aux | grep -E "(whisker|nginx|postgres)" | grep -v grep
}

ssl_renew() {
    print_status "Renewing SSL certificates..."
    certbot renew --nginx
    print_success "SSL renewal completed"
}

show_usage() {
    echo "Whisker Auth - VPS Maintenance Tool"
    echo
    echo "Usage: sudo $0 [command]"
    echo
    echo "Commands:"
    echo "  status      - Show service status"
    echo "  start       - Start all services"
    echo "  stop        - Stop all services" 
    echo "  restart     - Restart all services"
    echo "  logs        - View application logs"
    echo "  update      - Update application (files must be in /tmp/whisker-auth-new/)"
    echo "  backup      - Create backup of database and files"
    echo "  restore     - Restore from backup (specify backup file)"
    echo "  cleanup     - Clean up old logs"
    echo "  info        - Show system information"
    echo "  ssl-renew   - Renew SSL certificates"
    echo "  help        - Show this help message"
}

# Main script logic
case "${1:-help}" in
    status)
        service_status
        ;;
    start)
        check_root
        start_services
        ;;
    stop)
        check_root
        stop_services
        ;;
    restart)
        check_root
        restart_services
        ;;
    logs)
        view_logs
        ;;
    update)
        check_root
        update_application
        ;;
    backup)
        check_root
        create_backup
        ;;
    restore)
        check_root
        restore_backup "$@"
        ;;
    cleanup)
        check_root
        cleanup_logs
        ;;
    info)
        system_info
        ;;
    ssl-renew)
        check_root
        ssl_renew
        ;;
    help|*)
        show_usage
        ;;
esac